[core]
	editor = /usr/local/bin/vim
	autocrlf = input
	pager = delta
[transfer]
	fsckobjects = true
[alias]
	st = status
	stu = status -u
	di = diff --word-diff=color
	co = checkout
	ci = commit
	br = branch -vv
	sta = stash
	llog = log --date=local
	flog = log --pretty=fuller --decorate
	lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
	lol = log --graph --decorate --oneline
	lola = log --graph --decorate --oneline --all
	blog = log origin/master... --left-right
	ds = diff
	fixup = commit --amend --no-edit
	squash = commit
	unstage = reset
	# stashes changes with provided message
	pause = stash save -u
	# restores the stash
	resume = stash pop --index
	rum = rebase master@{u}
	it = !git init && git commit -m “root” --allow-empty
	l = log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(bold blue)<%an>%Creset'
	# log commits with file details
	ll = !git l --decorate --numstat
	lga = !git l --graph --all
	lgb = !git l --graph --branches
	# log incoming commits
	li = !git l HEAD..@{upstream}
	# log outgoing commits
	lo = !git l @{upstream}..HEAD
	refs = for-each-ref --sort=-committerdate --format='%(color:red bold)%(refname:short)%(color:reset) %(color:yellow)%(committerdate:relative)%(color:reset) %(color:magenta bold)%(authorname)%(color:reset) %(color:green)%(objectname:short)%(color:reset) %(contents:subject)'
	# list all local branches sorted by commit date (lbs = local branches sorted)
	lbs = !git refs refs/heads
	# list all remote tracking branches sorted by commit date (rbs = remote branches sorted)
	rbs = !git refs refs/remotes
	# list outdated branches that track a branch which no longer exists
	lob = !git branch -vv | grep ': gone' | cut -d ' ' -f 3
	# delete outdated branches
	dob = !git lob | xargs git branch -D
	# fetch and checkout a Github pull request
	fp = "!f() { git fetch upstream "pull/$1/head" && git checkout FETCH_HEAD; }; f"
	# rebase local commits on top of latest version in remote branch to avoid merge messages
	repush = !git pull --rebase && git push $1
	tidy = rebase -i @{upstream}..
[user]
	name = Oleg Iavorskyi
	email = oleg.iavorskyi@gmail.com
[pull]
	rebase = merges
[rerere]
	enabled = true
[color]
	ui = auto
	diff = auto
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[diff]
	wordRegex = .
	colorMoved = default
[init]
	defaultBranch = main
[interactive]
  diffFilter = delta --color-only
[delta]
  navigate = true    # use n and N to move between diff sections
  light = false      # set to true if you're in a terminal w/ a light background
[merge]
  conflictstyle = diff3
